/// Responsive breakpoint manager
///
/// Usage Example:
///
///  @include respond-to('small') {
///    display: block;
///  }
/// @param {String} $breakpoint - Breakpoint
@mixin respond-to($breakpoint) {
  $raw-query: map-get($breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(
                    type-of($raw-query) == 'string',
                    unquote($raw-query),
                    inspect($raw-query)
    );

    @media #{$query} {
      @content;
    }
  } @else {
    @error 'No value found for `#{$breakpoint}`. '
         + 'Please make sure it is defined in `$breakpoints` map.';
  }
}

@mixin header-padding() {
  padding-left: $horizontal-header-padding;
  padding-right: $horizontal-header-padding;

  @include respond-to('small') {
    padding-left: 0;
    padding-right: 0;
  }

  //@include respond-to('large') {
  //  padding-left: $horizontal-header-padding;
  //  padding-right: $horizontal-header-padding;
  //}
}


@mixin block-padding() {
  padding-left: $horizontal-content-padding;
  padding-right: $horizontal-content-padding;

  @include respond-to('small') {
    padding-left: 0;
    padding-right: 0;
  }

  //@include respond-to('large') {
  //  padding-left: $horizontal-content-padding;
  //  padding-right: $horizontal-content-padding;
  //}
}

@mixin block-margin() {
  margin-left: $horizontal-content-padding;
  margin-right: $horizontal-content-padding;

  @include respond-to('small') {
    margin-left: 0;
    margin-right: 0;
  }

  //@include respond-to('large') {
  //  margin-left: $horizontal-content-padding-large;
  //  margin-right: $horizontal-content-padding-large;
  //}
}

@mixin aspect-ratio($width, $height, $padding, $overflow_hidden) {
  position: relative;
  width: $width;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > .content {
    position: absolute;

    @if $overflow_hidden {
      overflow: hidden;
      top: $padding;
      left: $padding;
      right: $padding;
      bottom: $padding;
    } @else {
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      padding: $padding;
    }

  }
}

@mixin remove-aspect-ratio() {
  position: inherit;
  width: inherit;
  &:before {
    content: none;
  }
  > .content {
    position: inherit;
    overflow: inherit;
    top: inherit;
    left: inherit;
    right: inherit;
    bottom: inherit;
    padding: 0;
  }
}

@mixin clear-float() {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin small-triangle-top($bg-color: $col-small-triangle-bg) {

  &:before, &:after {
    content: '';
    position: absolute;
    width: 50%;
    height: 0;
    top: 0;
    border-bottom: $small-triangle-height solid $bg-color;
    box-sizing: border-box;
  }

  &:before {
    left: 0;
    border-right: $small-triangle-width-half solid $col-small-triangle;
  }

  &:after {
    right: 0;
    border-left: $small-triangle-width-half solid $col-small-triangle;
  }

}

@mixin triangle-on-bg-change($block-classname) {
  .bg-white + .bg-grey#{$block-classname} {
    padding-top: $vertical-spacing-large;
    @include small-triangle-top;
  }
}

@mixin li() {
  li {
    padding-bottom: 0;

    &:last-child {
      padding-bottom: 0;
    }
  }
}
